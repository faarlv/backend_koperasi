generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  phone       String        @unique
  password    String
  createdAt   DateTime      @default(now())
  role        Role          @default(MEMBER)
  Loan        Loan[]
  Transaction Transaction[]
  UserBalance UserBalance[]

  @@map("users")
}

model UserBalance {
  id           String   @id @default(uuid())
  userId       String   @unique
  totalBalance Decimal  @default(0)
  updatedAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_balance")

}

model Loan {
  id              String        @id @default(uuid())
  userId          String
  amount          Decimal
  interestFee     Decimal       // 10% of amount
  totalDue        Decimal       // amount + interestFee
  totalPaid       Decimal       @default(0)  // Tracks how much has been paid
  duration        Int
  purpose         String
  status          LoanStatus    @default(PENDING)
  paidMonths      Int           @default(0)
  remainingMonths Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  installments    Installment[]
  images          LoanImage[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("loans")
}

model Installment {
  id          String   @id @default(uuid())
  loanId      String
  month       Int
  amountPaid  Decimal   // How much user paid in this installment
  paidAt      DateTime  @default(now())
  createdAt   DateTime  @default(now())

  loan Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("installment")
}


model LoanImage {
  id     String @id @default(uuid())
  loanId String
  url    String

  loan Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("loan_image")

}

model Transaction {
  id        String   @id @default(uuid())
  userId    String
  amount    Decimal
  type      String   
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("transactions")

}


enum LoanStatus {
  PENDING
  APPROVED
  REJECTED
  ONGOING
  COMPLETED
}

enum Role {
  MEMBER
  ADMIN
}
